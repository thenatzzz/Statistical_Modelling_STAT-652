fit.tree.1se = prune(fit.tree, cp = CP.1se)
### The prp() function has many inputs We will just use two: type and extra.
### Setting both of these inputs to 1 gives a nice looking plot. Since
### prp() makes a plot, we can set the title using main. We also
### have to provide the fitted tree object which is being plotted.
x11(h=10, w=12, pointsize=11)
prp(fit.tree, type = 1, extra = 1, main = "Full Tree")
x11(h=10, w=12, pointsize=11)
par(mfrow=c(1,2))
prp(fit.tree.min, type = 1, extra = 1, main = "Pruned Tree - Min")
prp(fit.tree.1se, type = 1, extra = 1, main = "Pruned Tree - 1SE")
# clear var
rm(list=ls(all=TRUE))
#########################################################################
# Regression Trees on Prostate Data
#
set.seed(2385660,kind="Mersenne-Twister")
help("airquality")
AQ_original = airquality
head(AQ_original,5)
# X= Solar.R, Wind, Temp
# Y = Ozone
AQ = AQ_original[,1:4]
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
# sort Temp
AQ = AQ[order(AQ$Temp),]
head(AQ)
####################################################################
## Full analysis using my preferred settings
##   Includes code for automatic pruning using
##    both minimum cv and 1SE rule
####################################################################
set.seed(2385660,kind="Mersenne-Twister")
# pr.tree2 <- rpart(lpsa ~ ., method="anova", data=prostate, cp=0)
pr.tree2 <- rpart(Ozone ~ Temp + Wind, method="anova", data=AQ, cp=0)
pr.tree2
pr.tree2$cptable[,c(2:5,1)]
cpt <- pr.tree2$cptable
# x11(h=7, w=8)
plotcp(pr.tree2)
# Find location of minimum error
minrow <- which.min(cpt[,4])
# Take geometric mean of cp values at min error and one step up
cplow.min <- cpt[minrow,1]
cpup.min <- ifelse(minrow==1, yes=1, no=cpt[minrow-1,1])
cp.min <- sqrt(cplow.min*cpup.min)
# Find smallest row where error is below +1SE
se.row <- min(which(cpt[,4] < cpt[minrow,4]+cpt[minrow,5]))
# Take geometric mean of cp values at min error and one step up
cplow.1se <- cpt[se.row,1]
cpup.1se <- ifelse(se.row==1, yes=1, no=cpt[se.row-1,1])
cp.1se <- sqrt(cplow.1se*cpup.1se)
# Do pruning each way
pr2.prune.min <- prune(pr.tree2, cp=cp.min)
pr2.prune.1se <- prune(pr.tree2, cp=cp.1se)
library(rpart.plot)
x11(h=10, w=12, pointsize=11)
par(mfrow=c(1,2))
prp(pr2.prune.min, type=1, extra=1, main="Tree pruned to Min CV Error")
prp(pr2.prune.1se, type=1, extra=1, main="Tree pruned to +1SE CV Error")
###########################################
################## HW regression Tree ############
# clear var
library(rpart)
rm(list=ls(all=TRUE))
# Clear plots
dev.off()  # But only if there IS a plot
# set.seed(2928893)
set.seed(2385660,kind="Mersenne-Twister")
rm(list=ls(all=TRUE))
library(pls) # pls
library(MASS) # for ridge
library(glmnet) # for LASSO
library(mgcv) # gam
source("Helper Functions.R")
V= 10
# set.seed(2928893)
set.seed(2385660,kind="Mersenne-Twister")
AQ_original = airquality
head(AQ_original,5)
AQ = AQ_original[,1:4]
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
# Let's do 10-fold CV
n = nrow(AQ) #store sample size for easy calculations later
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=11)
colnames(MSPEs.cv) = c('Least-Sqr',"Ridge", "LASSO-min",
"LASSO-1SE",'Hybrid-Step','PLS',
'GAM-all','PPR','Tree','Tree-min','Tree-1se')
MSPEs.PPR.term = matrix(NA, nrow=V, ncol=1)
colnames(MSPEs.PPR.term) = c('PPR-terms')
for(v in 1:V){
### Print a status update
print(paste0(v, " of ", V))
### Leaste sqrt ###
fit.lm = lm(Ozone ~ ., data = AQ[folds != v,])
pred.lm = predict(fit.lm, newdata=AQ[folds==v,2:6])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.lm)^2)
### Ridge ###
ridge1 <- lm.ridge(Ozone ~., lambda = seq(0, 100, .05), data= AQ[folds != v,] )
(coef.ri.best1 = coef(ridge1)[which.min(ridge1$GCV),])
pred.ri1 = as.matrix(cbind(1,AQ[folds==v,2:6])) %*% coef.ri.best1
MSPEs.cv[v,2] = mean((AQ[folds==v,1]-pred.ri1)^2)
### Lasso-min,1se ###
x.1 <- as.matrix(AQ[folds!=v,c(2:6)])
y.1 <- AQ[folds!=v,1]
x.2 <- as.matrix(AQ[folds==v,c(2:6)])
y.2 <- AQ[folds==v,1]
cv.lasso <- cv.glmnet(y=y.1, x= x.1, family="gaussian")
pred.las.min <- predict(cv.lasso, newx=x.2, s=cv.lasso$lambda.min)
pred.las.1se <- predict(cv.lasso, newx=x.2, s=cv.lasso$lambda.1se)
MSPEs.cv[v,3] <- mean((y.2 - pred.las.min)^2)
MSPEs.cv[v,4] <- mean((y.2 - pred.las.1se)^2)
### Step ###
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
n1 = nrow(AQ[folds != v,])
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred)^2)
### PLS ###
mod.pls = plsr(Ozone ~.,data= AQ[folds != v,], validation="CV")
mp.cv = mod.pls$validation
Opt.Comps= which.min(sqrt(mp.cv$PRESS/nrow(AQ[folds != v,])))
# MSPEs.cv[v,1]=Opt.Comps
pred.pls = predict(mod.pls,ncomp=Opt.Comps, newdata=AQ[folds==v,2:6])
MSPEs.cv[v,6] = mean((AQ[folds==v,1] - pred.pls)^2)
### GAM ####
gam.all <- gam(data=AQ[folds != v,],
formula=Ozone ~s(Temp)+s(Wind) + s(Solar.R) + s(TWcp) + s(TWrat) ,
family=gaussian(link=identity))
pred.gam <- predict(gam.all ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,7] = mean((AQ[folds==v,1] - pred.gam)^2)
### PPR ###
max.terms = 5
### To fit PPR, we need to do another round of CV. This time, do 5-fold
K.ppr = 5
n.train = nrow(AQ[folds != v,])
folds.ppr = get.folds(n.train, K.ppr)
# print(folds.ppr)
MSPEs.ppr = array(0, dim = c(max.terms, K.ppr))
colnames(MSPEs.ppr) = c("ppr1", "ppr2", "ppr3",
'ppr4','ppr5')
for(j in 1:K.ppr){
train.ppr = AQ[folds != v,][folds.ppr != j,]
valid.ppr = AQ[folds != v,][folds.ppr == j,2:6]
Y.valid.ppr = AQ[folds != v,][folds.ppr == j,1]
for(l in 1:max.terms){
fit.ppr = ppr(Ozone ~ ., data = train.ppr,
max.terms = max.terms, nterms = l, sm.method = "gcvspline")
pred.ppr = predict(fit.ppr, valid.ppr)
MSPE.ppr = get.MSPE(Y.valid.ppr, pred.ppr) # Our helper function
MSPEs.ppr[j, l] = MSPE.ppr
}
}
ave.MSPE.ppr = apply(MSPEs.ppr, 2, mean)
print(ave.MSPE.ppr)
best.terms = which.min(ave.MSPE.ppr)
print(best.terms)
MSPEs.PPR.term[v,1] = best.terms
### Fit PPR on the whole CV training set using the optimal number of terms
fit.ppr.best = ppr(Ozone ~ ., data = AQ[folds != v,],
max.terms = max.terms, nterms = best.terms, sm.method = "gcvspline")
pred.ppr.best = predict(fit.ppr.best, AQ[folds == v,2:6])
MSPE.ppr.best = get.MSPE(AQ[folds == v,1], pred.ppr.best) # Our helper function
MSPEs.cv[v, 8] = MSPE.ppr.best
### Regression tree ####
pr.tree2 <- rpart(Ozone ~. , method="anova", data=AQ[folds != v,], cp=0)
pr.tree2$cptable[,c(2:5,1)]
cpt <- pr.tree2$cptable
# The code below shows how to select the tuning parameter using
#   either the +1SE or the true min CV error
# Find location of minimum error
minrow <- which.min(cpt[,4])
minrow
# Take geometric mean of cp values at min error and one step up
cplow.min <- cpt[minrow,1]
cpup.min <- ifelse(minrow==1, yes=1, no=cpt[minrow-1,1])
cp.min <- sqrt(cplow.min*cpup.min)
# Find smallest row where error is below +1SE
se.row <- min(which(cpt[,4] < cpt[minrow,4]+cpt[minrow,5]))
# Take geometric mean of cp values at min error and one step up
cplow.1se <- cpt[se.row,1]
cpup.1se <- ifelse(se.row==1, yes=1, no=cpt[se.row-1,1])
cp.1se <- sqrt(cplow.1se*cpup.1se)
# Do pruning each way
pr2.prune.min <- prune(pr.tree2, cp=cp.min)
pr2.prune.1se <- prune(pr.tree2, cp=cp.1se)
pred.tree <- predict(pr.tree2 ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,9] = mean((AQ[folds==v,1] - pred.tree)^2)
pred.prune.min <- predict(pr2.prune.min ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,10] = mean((AQ[folds==v,1] - pred.prune.min)^2)
pred.prune.1se <- predict(pr2.prune.1se ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,11] = mean((AQ[folds==v,1] - pred.prune.1se)^2)
}
dev.off()
MSPEs.cv
MSPEs.cv.mean= apply(X=MSPEs.cv,MARGIN=2,FUN=mean)
MSPEs.cv.mean
par(mar=c(7,5,5,5)+.1)
boxplot(MSPEs.cv, las=2, ylim=c(0,1500),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv, 1, min)
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,8),
main="Relative MSPE \n Cross-Validation")
rm(list=ls(all=TRUE))
library(pls) # pls
library(MASS) # for ridge
library(glmnet) # for LASSO
library(mgcv) # gam
source("Helper Functions.R")
V= 10
set.seed(2928893)
AQ_original = airquality
head(AQ_original,5)
AQ = AQ_original[,1:4]
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
# Let's do 10-fold CV
n = nrow(AQ) #store sample size for easy calculations later
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=11)
colnames(MSPEs.cv) = c('Least-Sqr',"Ridge", "LASSO-min",
"LASSO-1SE",'Hybrid-Step','PLS',
'GAM-all','PPR','Tree','Tree-min','Tree-1se')
MSPEs.PPR.term = matrix(NA, nrow=V, ncol=1)
colnames(MSPEs.PPR.term) = c('PPR-terms')
for(v in 1:V){
### Print a status update
print(paste0(v, " of ", V))
### Leaste sqrt ###
fit.lm = lm(Ozone ~ ., data = AQ[folds != v,])
pred.lm = predict(fit.lm, newdata=AQ[folds==v,2:6])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.lm)^2)
### Ridge ###
ridge1 <- lm.ridge(Ozone ~., lambda = seq(0, 100, .05), data= AQ[folds != v,] )
(coef.ri.best1 = coef(ridge1)[which.min(ridge1$GCV),])
pred.ri1 = as.matrix(cbind(1,AQ[folds==v,2:6])) %*% coef.ri.best1
MSPEs.cv[v,2] = mean((AQ[folds==v,1]-pred.ri1)^2)
### Lasso-min,1se ###
x.1 <- as.matrix(AQ[folds!=v,c(2:6)])
y.1 <- AQ[folds!=v,1]
x.2 <- as.matrix(AQ[folds==v,c(2:6)])
y.2 <- AQ[folds==v,1]
cv.lasso <- cv.glmnet(y=y.1, x= x.1, family="gaussian")
pred.las.min <- predict(cv.lasso, newx=x.2, s=cv.lasso$lambda.min)
pred.las.1se <- predict(cv.lasso, newx=x.2, s=cv.lasso$lambda.1se)
MSPEs.cv[v,3] <- mean((y.2 - pred.las.min)^2)
MSPEs.cv[v,4] <- mean((y.2 - pred.las.1se)^2)
### Step ###
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
n1 = nrow(AQ[folds != v,])
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred)^2)
### PLS ###
mod.pls = plsr(Ozone ~.,data= AQ[folds != v,], validation="CV")
mp.cv = mod.pls$validation
Opt.Comps= which.min(sqrt(mp.cv$PRESS/nrow(AQ[folds != v,])))
# MSPEs.cv[v,1]=Opt.Comps
pred.pls = predict(mod.pls,ncomp=Opt.Comps, newdata=AQ[folds==v,2:6])
MSPEs.cv[v,6] = mean((AQ[folds==v,1] - pred.pls)^2)
### GAM ####
gam.all <- gam(data=AQ[folds != v,],
formula=Ozone ~s(Temp)+s(Wind) + s(Solar.R) + s(TWcp) + s(TWrat) ,
family=gaussian(link=identity))
pred.gam <- predict(gam.all ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,7] = mean((AQ[folds==v,1] - pred.gam)^2)
### PPR ###
max.terms = 5
### To fit PPR, we need to do another round of CV. This time, do 5-fold
K.ppr = 5
n.train = nrow(AQ[folds != v,])
folds.ppr = get.folds(n.train, K.ppr)
# print(folds.ppr)
MSPEs.ppr = array(0, dim = c(max.terms, K.ppr))
colnames(MSPEs.ppr) = c("ppr1", "ppr2", "ppr3",
'ppr4','ppr5')
for(j in 1:K.ppr){
train.ppr = AQ[folds != v,][folds.ppr != j,]
valid.ppr = AQ[folds != v,][folds.ppr == j,2:6]
Y.valid.ppr = AQ[folds != v,][folds.ppr == j,1]
for(l in 1:max.terms){
fit.ppr = ppr(Ozone ~ ., data = train.ppr,
max.terms = max.terms, nterms = l, sm.method = "gcvspline")
pred.ppr = predict(fit.ppr, valid.ppr)
MSPE.ppr = get.MSPE(Y.valid.ppr, pred.ppr) # Our helper function
MSPEs.ppr[j, l] = MSPE.ppr
}
}
ave.MSPE.ppr = apply(MSPEs.ppr, 2, mean)
print(ave.MSPE.ppr)
best.terms = which.min(ave.MSPE.ppr)
print(best.terms)
MSPEs.PPR.term[v,1] = best.terms
### Fit PPR on the whole CV training set using the optimal number of terms
fit.ppr.best = ppr(Ozone ~ ., data = AQ[folds != v,],
max.terms = max.terms, nterms = best.terms, sm.method = "gcvspline")
pred.ppr.best = predict(fit.ppr.best, AQ[folds == v,2:6])
MSPE.ppr.best = get.MSPE(AQ[folds == v,1], pred.ppr.best) # Our helper function
MSPEs.cv[v, 8] = MSPE.ppr.best
### Regression tree ####
pr.tree2 <- rpart(Ozone ~. , method="anova", data=AQ[folds != v,], cp=0)
pr.tree2$cptable[,c(2:5,1)]
cpt <- pr.tree2$cptable
# The code below shows how to select the tuning parameter using
#   either the +1SE or the true min CV error
# Find location of minimum error
minrow <- which.min(cpt[,4])
minrow
# Take geometric mean of cp values at min error and one step up
cplow.min <- cpt[minrow,1]
cpup.min <- ifelse(minrow==1, yes=1, no=cpt[minrow-1,1])
cp.min <- sqrt(cplow.min*cpup.min)
# Find smallest row where error is below +1SE
se.row <- min(which(cpt[,4] < cpt[minrow,4]+cpt[minrow,5]))
# Take geometric mean of cp values at min error and one step up
cplow.1se <- cpt[se.row,1]
cpup.1se <- ifelse(se.row==1, yes=1, no=cpt[se.row-1,1])
cp.1se <- sqrt(cplow.1se*cpup.1se)
# Do pruning each way
pr2.prune.min <- prune(pr.tree2, cp=cp.min)
pr2.prune.1se <- prune(pr.tree2, cp=cp.1se)
pred.tree <- predict(pr.tree2 ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,9] = mean((AQ[folds==v,1] - pred.tree)^2)
pred.prune.min <- predict(pr2.prune.min ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,10] = mean((AQ[folds==v,1] - pred.prune.min)^2)
pred.prune.1se <- predict(pr2.prune.1se ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,11] = mean((AQ[folds==v,1] - pred.prune.1se)^2)
}
dev.off()
MSPEs.cv
MSPEs.cv.mean= apply(X=MSPEs.cv,MARGIN=2,FUN=mean)
MSPEs.cv.mean
par(mar=c(7,5,5,5)+.1)
boxplot(MSPEs.cv, las=2, ylim=c(0,1500),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv, 1, min)
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,8),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv, las=2, ylim=c(0,1500),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv, 1, min)
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,8),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,3),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,3),
main="Focused Relative MSPE \n Cross-Validation")
rm(list=ls(all=TRUE))
library(pls) # pls
library(MASS) # for ridge
library(glmnet) # for LASSO
library(mgcv) # gam
rm(list=ls(all=TRUE))
library(pls) # pls
library(MASS) # for ridge
library(glmnet) # for LASSO
library(mgcv) # gam
source("Helper Functions.R")
V= 10
set.seed(2928893)
AQ_original = airquality
head(AQ_original,5)
AQ = AQ_original[,1:4]
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
# Let's do 10-fold CV
n = nrow(AQ) #store sample size for easy calculations later
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=11)
colnames(MSPEs.cv) = c('Least-Sqr',"Ridge", "LASSO-min",
"LASSO-1SE",'Hybrid-Step','PLS',
'GAM-all','PPR','Tree','Tree-min','Tree-1se')
MSPEs.PPR.term = matrix(NA, nrow=V, ncol=1)
colnames(MSPEs.PPR.term) = c('PPR-terms')
for(v in 1:V){
### Print a status update
print(paste0(v, " of ", V))
### Leaste sqrt ###
fit.lm = lm(Ozone ~ ., data = AQ[folds != v,])
pred.lm = predict(fit.lm, newdata=AQ[folds==v,2:6])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.lm)^2)
### Ridge ###
ridge1 <- lm.ridge(Ozone ~., lambda = seq(0, 100, .05), data= AQ[folds != v,] )
(coef.ri.best1 = coef(ridge1)[which.min(ridge1$GCV),])
pred.ri1 = as.matrix(cbind(1,AQ[folds==v,2:6])) %*% coef.ri.best1
MSPEs.cv[v,2] = mean((AQ[folds==v,1]-pred.ri1)^2)
### Lasso-min,1se ###
x.1 <- as.matrix(AQ[folds!=v,c(2:6)])
y.1 <- AQ[folds!=v,1]
x.2 <- as.matrix(AQ[folds==v,c(2:6)])
y.2 <- AQ[folds==v,1]
cv.lasso <- cv.glmnet(y=y.1, x= x.1, family="gaussian")
pred.las.min <- predict(cv.lasso, newx=x.2, s=cv.lasso$lambda.min)
pred.las.1se <- predict(cv.lasso, newx=x.2, s=cv.lasso$lambda.1se)
MSPEs.cv[v,3] <- mean((y.2 - pred.las.min)^2)
MSPEs.cv[v,4] <- mean((y.2 - pred.las.1se)^2)
### Step ###
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
n1 = nrow(AQ[folds != v,])
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred)^2)
### PLS ###
mod.pls = plsr(Ozone ~.,data= AQ[folds != v,], validation="CV")
mp.cv = mod.pls$validation
Opt.Comps= which.min(sqrt(mp.cv$PRESS/nrow(AQ[folds != v,])))
# MSPEs.cv[v,1]=Opt.Comps
pred.pls = predict(mod.pls,ncomp=Opt.Comps, newdata=AQ[folds==v,2:6])
MSPEs.cv[v,6] = mean((AQ[folds==v,1] - pred.pls)^2)
### GAM ####
gam.all <- gam(data=AQ[folds != v,],
formula=Ozone ~s(Temp)+s(Wind) + s(Solar.R) + s(TWcp) + s(TWrat) ,
family=gaussian(link=identity))
pred.gam <- predict(gam.all ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,7] = mean((AQ[folds==v,1] - pred.gam)^2)
### PPR ###
max.terms = 5
### To fit PPR, we need to do another round of CV. This time, do 5-fold
K.ppr = 5
n.train = nrow(AQ[folds != v,])
folds.ppr = get.folds(n.train, K.ppr)
# print(folds.ppr)
MSPEs.ppr = array(0, dim = c(max.terms, K.ppr))
colnames(MSPEs.ppr) = c("ppr1", "ppr2", "ppr3",
'ppr4','ppr5')
for(j in 1:K.ppr){
train.ppr = AQ[folds != v,][folds.ppr != j,]
valid.ppr = AQ[folds != v,][folds.ppr == j,2:6]
Y.valid.ppr = AQ[folds != v,][folds.ppr == j,1]
for(l in 1:max.terms){
fit.ppr = ppr(Ozone ~ ., data = train.ppr,
max.terms = max.terms, nterms = l, sm.method = "gcvspline")
pred.ppr = predict(fit.ppr, valid.ppr)
MSPE.ppr = get.MSPE(Y.valid.ppr, pred.ppr) # Our helper function
MSPEs.ppr[j, l] = MSPE.ppr
}
}
ave.MSPE.ppr = apply(MSPEs.ppr, 2, mean)
print(ave.MSPE.ppr)
best.terms = which.min(ave.MSPE.ppr)
print(best.terms)
MSPEs.PPR.term[v,1] = best.terms
### Fit PPR on the whole CV training set using the optimal number of terms
fit.ppr.best = ppr(Ozone ~ ., data = AQ[folds != v,],
max.terms = max.terms, nterms = best.terms, sm.method = "gcvspline")
pred.ppr.best = predict(fit.ppr.best, AQ[folds == v,2:6])
MSPE.ppr.best = get.MSPE(AQ[folds == v,1], pred.ppr.best) # Our helper function
MSPEs.cv[v, 8] = MSPE.ppr.best
### Regression tree ####
pr.tree2 <- rpart(Ozone ~. , method="anova", data=AQ[folds != v,], cp=0)
pr.tree2$cptable[,c(2:5,1)]
cpt <- pr.tree2$cptable
# The code below shows how to select the tuning parameter using
#   either the +1SE or the true min CV error
# Find location of minimum error
minrow <- which.min(cpt[,4])
minrow
# Take geometric mean of cp values at min error and one step up
cplow.min <- cpt[minrow,1]
cpup.min <- ifelse(minrow==1, yes=1, no=cpt[minrow-1,1])
cp.min <- sqrt(cplow.min*cpup.min)
# Find smallest row where error is below +1SE
se.row <- min(which(cpt[,4] < cpt[minrow,4]+cpt[minrow,5]))
# Take geometric mean of cp values at min error and one step up
cplow.1se <- cpt[se.row,1]
cpup.1se <- ifelse(se.row==1, yes=1, no=cpt[se.row-1,1])
cp.1se <- sqrt(cplow.1se*cpup.1se)
# Do pruning each way
pr2.prune.min <- prune(pr.tree2, cp=cp.min)
pr2.prune.1se <- prune(pr.tree2, cp=cp.1se)
pred.tree <- predict(pr.tree2 ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,9] = mean((AQ[folds==v,1] - pred.tree)^2)
pred.prune.min <- predict(pr2.prune.min ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,10] = mean((AQ[folds==v,1] - pred.prune.min)^2)
pred.prune.1se <- predict(pr2.prune.1se ,newdata=AQ[folds==v,2:6])
MSPEs.cv[v,11] = mean((AQ[folds==v,1] - pred.prune.1se)^2)
}
dev.off()
MSPEs.cv
MSPEs.cv.mean= apply(X=MSPEs.cv,MARGIN=2,FUN=mean)
MSPEs.cv.mean
par(mar=c(7,5,5,5)+.1)
boxplot(MSPEs.cv, las=2, ylim=c(0,1500),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv, 1, min)
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,8),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv/low.c, las=2,ylim=c(0.8,3),
main="Focused Relative MSPE \n Cross-Validation")
fit.tree = rpart(Ozone ~ Temp + Wind, data = AQ, cp = 0)
