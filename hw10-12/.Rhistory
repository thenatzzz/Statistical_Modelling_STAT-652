library(mgcv)
#  Generalized additive model on all variables
gam.all <- gam(data=AQ,
formula=Ozone ~s(Temp)+s(Wind) + s(Solar.R) + s(TWcp) + s(TWrat) ,
family=gaussian(link=identity))
summary(gam.all)
x11(h=7,w=15,pointsize=12)
par(mfrow=c(2,3))
library(mgcv)
#  Generalized additive model on all variables
gam.all <- gam(data=AQ,
formula=Ozone ~s(Temp)+s(Wind) + s(Solar.R) + s(TWcp) + s(TWrat) ,
family=gaussian(link=identity))
###### HW 11
rm(list=ls(all=TRUE))
AQ_original = airquality
# X= Solar.R, Wind, Temp
# Y = Ozone
AQ = AQ_original[,1:4]
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
# sort Temp
# AQ = AQ[order(AQ$Temp),]
head(AQ)
library(mgcv)
#  Generalized additive model on all variables
gam.all <- gam(data=AQ,
formula=Ozone ~s(Temp)+s(Wind) + s(Solar.R) + s(TWcp) + s(TWrat) ,
family=gaussian(link=identity))
summary(gam.all)
x11(h=7,w=15,pointsize=12)
par(mfrow=c(2,3))
plot(gam.all,main='GAM marginal splines')
################### HW12#########################
#### 1.
rm(list=ls(all=TRUE))
set.seed(2928893)
AQ_original = airquality
# X= Solar.R, Wind, Temp
# Y = Ozone
AQ = AQ_original[,1:4]
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
# sort Temp
# AQ = AQ[order(AQ$Temp),]
head(AQ)
################ based on TA code ####################
###hw12-2. #####
source("Helper Functions.R")
# data=AQ
max.terms = 5 # Maximum number of terms for PPR
### Create folds
K = 10 # Number of folds
set.seed(2928893)
folds = get.folds(nrow(AQ), K) # Our helper function
folds
### Create container for CV MSPEs
all.models = c("PPR-1", "PPR-2","PPR-3", "PPR-4","PPR-5")
n.models = length(all.models)
CV.MSPEs = array(0, dim = c(K,n.models))
colnames(CV.MSPEs) = all.models
for(i in 1:K){
### Print a status update
print(paste0(i, " of ", K))
### Split data
data.train = AQ[folds != i,]
data.valid = AQ[folds == i,2:6]
# data.valid = AQ[folds == i,]
# Y.valid = data.valid$Ozone
Y.valid = AQ[folds == i,1]
###########
### PPR ###
###########
for (p in 1:max.terms){
ppr1 <- ppr(data=data.train, Ozone~ .,
nterms=p,max.terms=5, sm.method="gcvspline")
pred.ppr1 = predict(ppr1, data.valid)
MSPE.ppr1 = get.MSPE(Y.valid, pred.ppr1) # Our helper function
CV.MSPEs[i,all.models[p]] = MSPE.ppr1
print(CV.MSPEs)
}
}
# CV.MSPEs = t(CV.MSPEs)
CV.MSPEs
CV.MSPEs.mean= apply(X=CV.MSPEs,MARGIN=2,FUN=mean)
CV.MSPEs.mean
### Make a boxplot of MSPEs for the different number of terms
boxplot(CV.MSPEs, las=2, ylim=c(0,1500),
main="MSPE \n Cross-Validation")
