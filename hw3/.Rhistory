CV.MSPEs[i, 3] = MSPE.Temp
CV.MSPEs[i, 4] = MSPE.all
CV.MSPEs[i, 5] = MSPE.int
}
### We now have MSPEs for each fold of one iteration of CV. Let's
### get the average error across these folds (think of each fold
### as a data split), and store the result in ave.CV.MSPEs
this.ave.MSPEs = apply(CV.MSPEs, 2, mean)
ave.CV.MSPEs[j,] = this.ave.MSPEs # We are replacing a whole
# row at once
}
boxplot(ave.CV.MSPEs,
main = "Boxplot of 20 Replicates of Average 10-Fold CV Error")
rel.ave.CV.MSPEs = apply(ave.CV.MSPEs, 1, function(W){
best = min(W)
return(W / best)
})
rel.ave.CV.MSPEs = t(rel.ave.CV.MSPEs)
boxplot(rel.ave.CV.MSPEs,
main = "Boxplot of 20 Replicates of Relative Average 10-Fold CV Error")
# Load the dataset and take a look
AQ = airquality[,1:4]
# clear var
rm(list=ls(all=TRUE))
# Clear plots
dev.off()  # But only if there IS a plot
# Load the dataset and take a look
AQ = airquality[,1:4]
head(AQ)
dim(AQ)
AQ = na.omit(airquality[,1:4])
dim(AQ)
set.seed(4099183)
sf1 = 0.75
sf2 = 0.25
n = 111
reorder = sample.int(n=n, size=n, replace=FALSE)
#reorder = sample.int(n=n)
#size.train = floor(n*sf1)
set = ifelse(test=(reorder < sf1*n), yes=1, no = 2)
#set = reorder[(size.train+1):n]
set
AQ1 = AQ
AQ1 = cbind(AQ1,set)
AQ2 = subset(AQ1, set=='2')
AQ2
dim(AQ2)
# Question 3
model_Solar = lm(Ozone~Solar.R, data=AQ[set==1,])
model_Temp = lm(Ozone~Temp, data=AQ[set==1,])
model_Wind = lm(Ozone~Wind, data=AQ[set==1,])
AQ1
# Question 3
model_Solar = lm(Ozone~Solar.R, data=AQ[set==1,])
model_Temp = lm(Ozone~Temp, data=AQ[set==1,])
model_Wind = lm(Ozone~Wind, data=AQ[set==1,])
model_all = lm(Ozone~Temp+Wind+Solar.R, data=AQ[set==1,])
model_5 = lm(Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)+Temp*Wind+
Temp*Solar.R+Wind*Solar.R, data=AQ[set==1,])
pred.solar = predict(model_Solar, newdata=AQ[set==2,])
pred.temp = predict(model_Temp, newdata=AQ[set==2,])
pred.wind = predict(model_Wind, newdata=AQ[set==2,])
pred.all = predict(model_all, newdata=AQ[set==2,])
pred.5 = predict(model_5, newdata=AQ[set==2,])
(MSPE.solar = mean((AQ[set==2,"Ozone"] - pred.solar)^2))
(MSPE.temp = mean((AQ[set==2,"Ozone"] - pred.temp)^2))
(MSPE.wind = mean((AQ[set==2,"Ozone"] - pred.wind)^2))
(MSPE.all = mean((AQ[set==2,"Ozone"] - pred.all)^2))
(MSPE.5 = mean((AQ[set==2,"Ozone"] - pred.5)^2))
MSPE.solar
MSPE.temp
MSPE.wind
MSPE.all
MSPE.5
V=10
n2 = nrow(AQ)
folds = floor((sample.int(n2)-1)*V/n2) + 1
folds
# MSPE.Wind = get.MSPE(Y.valid, pred.Wind)
# MSPE.Wind
# MSPE.Temp = get.MSPE(Y.valid, pred.Temp)
# MSPE.Temp
# MSPE.all = get.MSPE(Y.valid, pred.all)
# MSPE.all
# MSPE.int = get.MSPE(Y.valid, pred.int)
# MSPE.int
##########################################################################
##### 4. 10-fold CV to estimate MSPEs for 5 models
n.fold = n/10 # Number of observations in each fold
n.fold = ceiling(n.fold) # Round up to make sure we get enough labels
# We can remove any excess later
ordered.ids = rep(1:10, times = n.fold)
ordered.ids
ordered.ids = ordered.ids[1:n] # Remove excess label(s)
ordered.ids
folds = floor((sample.int(n2)-1)*V/n2) + 1
folds
shuffle = sample.int(n) # Randomly permute the numbers 1 to n
shuffle
shuffled.ids = ordered.ids[shuffle] # Use shuffle to permute
shuffled.ids
folds
# the fold labels
data.CV = AQ # Create a copy of our dataset
data.CV
data.CV$fold = shuffled.ids # Add a column to our new dataset containing
data.CV
shuffled.ids
MSPEs.cv = matrix(NA, nrow=V, ncol=5)
MSPEs.cv
colnames(MSPEs.cv) = c("solar", "temp", "wind","solar+temp+wind","(solar+temp+wind)^2")
MSPEs.cv
### Next, let's actually do the cross validation. This will be easier
### with a for loop than with the replicate function. First, we will
### need to make an array to store the MSPEs
CV.MSPEs = array(0, dim = c(10, 5))
colnames(CV.MSPEs)=c("Solar.R", "Wind", "Temp", "all","int")
CV.MSPEs
### Remove fold from training and validation sets since it
### isn't a real predictor
print(fold)
### Remove fold from training and validation sets since it
### isn't a real predictor
data.train = select(data.train, -fold)
### Next, let's actually do the cross validation. This will be easier
### with a for loop than with the replicate function. First, we will
### need to make an array to store the MSPEs
CV.MSPEs = array(0, dim = c(10, 5))
colnames(CV.MSPEs)=c("Solar.R", "Wind", "Temp", "all","int")
for(i in 1:10){
### Use fold i for validation and the rest for training
data.train = filter(data.CV, fold != i)
data.valid = filter(data.CV, fold == i)
### Remove fold from training and validation sets since it
### isn't a real predictor
data.train = select(data.train, -fold)
data.valid = select(data.valid, -fold)
fit.Solar.R = lm(Ozone ~ Solar.R, data = data.train)
fit.Wind = lm(Ozone ~ Wind, data = data.train)
fit.Temp = lm(Ozone ~Temp, data = data.train)
fit.all = lm(Ozone ~ ., data = data.train)
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = data.train)
pred.Solar.R = predict(fit.Solar.R, data.valid)
# pred.Solar.R
pred.Wind = predict(fit.Wind, data.valid)
# pred.Wind
pred.Temp = predict(fit.Temp, data.valid)
# pred.Temp
pred.all = predict(fit.all, data.valid)
# pred.all
pred.int = predict(fit.int, data.valid)
# pred.int
Y.valid = data.valid$Ozone
(MSPE.Solar.R = mean((Y.valid - pred.Solar.R)^2))
# MSPE.Solar.R
(MSPE.Wind = mean((Y.valid - pred.Wind)^2))
# MSPE.Wind
(MSPE.Temp = mean((Y.valid - pred.Temp)^2))
# MSPE.Temp
(MSPE.all = mean((Y.valid - pred.all)^2))
# MSPE.all
(MSPE.int = mean((Y.valid - pred.int)^2))
# MSPE.int
### Store MSPEs
CV.MSPEs[i, 1] = MSPE.Solar.R
CV.MSPEs[i, 2] = MSPE.Wind
CV.MSPEs[i, 3] = MSPE.Temp
CV.MSPEs[i, 4] = MSPE.all
CV.MSPEs[i, 5] = MSPE.int
}
### In tutorial, I was getting an error because I wrote -folds
### instead of -fold. Whoops!
print(fold)
print(data.train)
data.train = filter(data.CV, foldz != i)
data.valid = filter(data.CV, foldz == i)
data.valid = filter(data.CV, fold == i)
help("airquality")
# clear var
rm(list=ls(all=TRUE))
# Clear plots
dev.off()  # But only if there IS a plot
AQ_original = airquality
head(AQ_original,5)
dim(AQ_original) # 153 x 6
#######1.deal with missing data: delete null ###
AQ = na.omit(airquality[,1:4])
dim(AQ) # 111 x 4
n = nrow(AQ) #store sample size for easy calculations later
sf1 = 0.75
set.seed(4099183)
reorder = sample.int(n=n, size=n, replace=FALSE) ### Shuffled numbers from 1 to n
# reorder = sample.int(n=n)
reorder
set = ifelse(test=(reorder < sf1*n), yes=1,
no=2)
set
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[set==1,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[set==1,])
fit.Temp = lm(Ozone ~Temp, data = AQ[set==1,])
fit.all = lm(Ozone ~ ., data = AQ[set==1,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[set==1,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[set==2,])
pred.Wind = predict(fit.Wind, newdata=AQ[set==2,])
pred.Temp = predict(fit.Temp, newdata=AQ[set==2,])
pred.all = predict(fit.all, newdata=AQ[set==2,])
pred.int = predict(fit.int,newdata=AQ[set==2,])
(MSPE.Solar.R = mean((AQ[set==2,"Ozone"] - pred.Solar.R)^2))
MSPE.Solar.R
(MSPE.Wind = mean((AQ[set==2,"Ozone"] - pred.Wind)^2))
MSPE.Wind
(MSPE.Temp = mean((AQ[set==2,"Ozone"] - pred.Temp)^2))
MSPE.Temp
(MSPE.all = mean((AQ[set==2,"Ozone"] - pred.all)^2))
MSPE.all
(MSPE.int = mean((AQ[set==2,"Ozone"] - pred.int)^2))
MSPE.int
##### 4. 10-fold CV to estimate MSPEs for 5 models
# Let's do 10-fold CV
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n2)-1)*V/n) + 1
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=5)
colnames(MSPEs.cv) = c("Solar.R", "Wind", "Temp","all","complex")
MSPEs.cv
MSPEs.cv = matrix(NA, nrow=V, ncol=5)
colnames(MSPEs.cv) = c("Solar.R", "Wind", "Temp","all","complex")
for(v in 1:V){
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
pred.all = predict(fit.all, newdata=AQ[folds==v,])
pred.int = predict(fit.int,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
}
MSPEs.cv
(MSPEcv = apply(X=MSPEs.cv, MARGIN=2, FUN=mean))
(MSPEcv.sd = apply(X=MSPEs.cv, MARGIN=2, FUN=sd))
MSPEcv.CIl = MSPEcv - qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
MSPEs.cv
R = 100
(MSPEcv = apply(X=MSPEs.cv, MARGIN=2, FUN=mean))
(MSPEcv.sd = apply(X=MSPEs.cv, MARGIN=2, FUN=sd))
MSPEcv.CIl = MSPEcv - qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
MSPEcv.CIu = MSPEcv + qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
round(cbind(MSPEcv.CIl, MSPEcv.CIu),2)
V=10
R=20 #creates a total of 15*n2 predicted values, comparable to multile splits above
MSPEs.cv15 = matrix(NA, nrow=V*R, ncol=5)
colnames(MSPEs.cv15) = c("lcavol-c", "pgg45-c", "both-c")
colnames(MSPEs.cv15) = c("Solar.R", "Wind", "Temp","all","complex")
MSPEs.cv15
V=10
R=20 #creates a total of 20*n2 predicted values, comparable to multile splits above
MSPEs.cv15 = matrix(NA, nrow=V*R, ncol=5)
colnames(MSPEs.cv15) = c("Solar.R", "Wind", "Temp","all","complex")
for (r in 1:R){
folds = floor((sample.int(n)-1)*V/n) + 1
for(v in 1:V){
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
pred.all = predict(fit.all, newdata=AQ[folds==v,])
pred.int = predict(fit.int,newdata=AQ[folds==v,])
MSPEs.cv15[(r-1)*V+v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
MSPEs.cv15[(r-1)*V+v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
MSPEs.cv15[(r-1)*V+v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
MSPEs.cv15[(r-1)*V+v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
MSPEs.cv15[(r-1)*V+v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
}
}
MSPEs.cv15
(MSPEcv15 = apply(X=MSPEs.cv15, MARGIN=2, FUN=mean))
(MSPEcv15.sd = apply(X=MSPEs.cv15, MARGIN=2, FUN=sd))
MSPEcv15.CIl = MSPEcv15 - qt(p=.975, df=R*V-1)*MSPEcv15.sd/sqrt(R*V)
MSPEcv15.CIu = MSPEcv15 + qt(p=.975, df=R*V-1)*MSPEcv15.sd/sqrt(R*V)
round(cbind(MSPEcv15.CIl, MSPEcv15.CIu),2)
V=10
R=20 #creates a total of 20*n2 predicted values, comparable to multile splits above
MSPEs.cv20 = matrix(NA, nrow=V*R, ncol=5)
colnames(MSPEs.cv20) = c("Solar.R", "Wind", "Temp","all","complex")
for (r in 1:R){
folds = floor((sample.int(n)-1)*V/n) + 1
for(v in 1:V){
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
pred.all = predict(fit.all, newdata=AQ[folds==v,])
pred.int = predict(fit.int,newdata=AQ[folds==v,])
MSPEs.cv20[(r-1)*V+v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
MSPEs.cv20[(r-1)*V+v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
MSPEs.cv20[(r-1)*V+v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
MSPEs.cv20[(r-1)*V+v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
MSPEs.cv20[(r-1)*V+v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
}
}
MSPEs.cv20
(MSPEcv20 = apply(X=MSPEs.cv20, MARGIN=2, FUN=mean))
(MSPEcv20.sd = apply(X=MSPEs.cv20, MARGIN=2, FUN=sd))
MSPEcv20.CIl = MSPEcv20 - qt(p=.975, df=R*V-1)*MSPEcv20.sd/sqrt(R*V)
MSPEcv20.CIu = MSPEcv20 + qt(p=.975, df=R*V-1)*MSPEcv20.sd/sqrt(R*V)
round(cbind(MSPEcv20.CIl, MSPEcv20.CIu),2)
boxplot(MSPEs.cv20, las=2, ylim=c(0,2800),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv20, 1, min)
boxplot(MSPEs.cv20/low.c, las=2,
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2, ylim=c(1,1.5),
main="Focused Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20, las=2, ylim=c(0,2800),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv20, 1, min)
boxplot(MSPEs.cv20/low.c, las=2,
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2, ylim=c(1,1.5),
main="Focused Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20, las=2, ylim=c(0,2800),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv20, 1, min)
boxplot(MSPEs.cv20/low.c, las=2,
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2,ylim=c(0,16),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2,ylim=c(0,15),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2, ylim=c(1,1.5),
main="Focused Relative MSPE \n Cross-Validation")
help("airquality")
# clear var
rm(list=ls(all=TRUE))
# Clear plots
dev.off()  # But only if there IS a plot
#######1.deal with missing data: delete null ###
AQ = na.omit(airquality[,1:4])
dim(AQ) # 111 x 4
head(AQ)
n = nrow(AQ) #store sample size for easy calculations later
sf1 = 0.75
set.seed(4099183)
reorder = sample.int(n=n, size=n, replace=FALSE) ### Shuffled numbers from 1 to n
# reorder = sample.int(n=n)
reorder
set = ifelse(test=(reorder < sf1*n), yes=1,
no=2)
set
AQ[set==2,]
sf1 = 0.75
set.seed(4099183)
reorder = sample.int(n=n, size=n, replace=FALSE) ### Shuffled numbers from 1 to n
# reorder = sample.int(n=n)
reorder
set = ifelse(test=(reorder < sf1*n), yes=1,
no=2)
set
AQ[set==2,]
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[set==1,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[set==1,])
fit.Temp = lm(Ozone ~Temp, data = AQ[set==1,])
fit.all = lm(Ozone ~ ., data = AQ[set==1,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[set==1,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[set==2,])
pred.Wind = predict(fit.Wind, newdata=AQ[set==2,])
pred.Temp = predict(fit.Temp, newdata=AQ[set==2,])
pred.all = predict(fit.all, newdata=AQ[set==2,])
pred.int = predict(fit.int,newdata=AQ[set==2,])
(MSPE.Solar.R = mean((AQ[set==2,"Ozone"] - pred.Solar.R)^2))
(MSPE.Wind = mean((AQ[set==2,"Ozone"] - pred.Wind)^2))
(MSPE.Temp = mean((AQ[set==2,"Ozone"] - pred.Temp)^2))
(MSPE.all = mean((AQ[set==2,"Ozone"] - pred.all)^2))
(MSPE.int = mean((AQ[set==2,"Ozone"] - pred.int)^2))
MSPE.Solar.R
MSPE.Wind
MSPE.Temp
MSPE.all
MSPE.int
MSPE.Solar.R
MSPE.complex = MSPE.int
MSPE.Solar.R
MSPE.Wind
MSPE.Temp
MSPE.all
MSPE.complex
clear
# Clear console
cat("\014")  # ctrl+L
MSPE.Solar.R
MSPE.Wind
MSPE.Temp
MSPE.all
MSPE.complex
##### 4. 10-fold CV to estimate MSPEs for 5 models
# Let's do 10-fold CV
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=5)
colnames(MSPEs.cv) = c("Solar.R", "Wind", "Temp","all","complex")
for(v in 1:V){
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
pred.all = predict(fit.all, newdata=AQ[folds==v,])
pred.int = predict(fit.int,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
}
MSPEs.cv
R = 100
(MSPEcv = apply(X=MSPEs.cv, MARGIN=2, FUN=mean))
(MSPEcv.sd = apply(X=MSPEs.cv, MARGIN=2, FUN=sd))
MSPEcv.CIl = MSPEcv - qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
MSPEcv.CIu = MSPEcv + qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
round(cbind(MSPEcv.CIl, MSPEcv.CIu),2)
MSPEs.cv
R = 100
(MSPEcv = apply(X=MSPEs.cv, MARGIN=2, FUN=mean))
(MSPEcv.sd = apply(X=MSPEs.cv, MARGIN=2, FUN=sd))
MSPEcv.CIl = MSPEcv - qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
MSPEcv.CIu = MSPEcv + qt(p=.975, df=R-1)*MSPEcv.sd/sqrt(V)
round(cbind(MSPEcv.CIl, MSPEcv.CIu),2)
table = round(cbind(MSPEcv.CIl, MSPEcv.CIu,MSPEcv),3)
colnames(table)[3] = "mean"
table
V=10
R=20 #creates a total of 20*n2 predicted values, comparable to multile splits above
MSPEs.cv20 = matrix(NA, nrow=V*R, ncol=5)
colnames(MSPEs.cv20) = c("Solar.R", "Wind", "Temp","all","complex")
for (r in 1:R){
folds = floor((sample.int(n)-1)*V/n) + 1
for(v in 1:V){
fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
+Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
pred.all = predict(fit.all, newdata=AQ[folds==v,])
pred.int = predict(fit.int,newdata=AQ[folds==v,])
MSPEs.cv20[(r-1)*V+v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
MSPEs.cv20[(r-1)*V+v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
MSPEs.cv20[(r-1)*V+v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
MSPEs.cv20[(r-1)*V+v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
MSPEs.cv20[(r-1)*V+v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
}
}
MSPEs.cv20
(MSPEcv20 = apply(X=MSPEs.cv20, MARGIN=2, FUN=mean))
(MSPEcv20.sd = apply(X=MSPEs.cv20, MARGIN=2, FUN=sd))
MSPEcv20.CIl = MSPEcv20 - qt(p=.975, df=R*V-1)*MSPEcv20.sd/sqrt(R*V)
MSPEcv20.CIu = MSPEcv20 + qt(p=.975, df=R*V-1)*MSPEcv20.sd/sqrt(R*V)
round(cbind(MSPEcv20.CIl, MSPEcv20.CIu),2)
boxplot(MSPEs.cv20, las=2, ylim=c(0,2800),
main="MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv20, 1, min)
boxplot(MSPEs.cv20/low.c, las=2,ylim=c(0,15),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2, ylim=c(1,1.5),
main="Focused Relative MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv20, 1, min)
boxplot(MSPEs.cv20/low.c, las=2,ylim=c(0,15),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2, ylim=c(1,1.6),
main="Focused Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2,ylim=c(0,15,1),
main="Relative MSPE \n Cross-Validation")
low.c = apply(MSPEs.cv20, 1, min)
boxplot(MSPEs.cv20/low.c, las=2,ylim=c(0,15),
main="Relative MSPE \n Cross-Validation")
boxplot(MSPEs.cv20/low.c, las=2, ylim=c(1,1.6),
main="Focused Relative MSPE \n Cross-Validation")
dim(AQ[set==2,])
dim(AQ[set==1,])
dim(AQ[set==2,])
