table(summ.1)
################# hw5 ###############
rm(list=ls(all=TRUE))
AQ_original = airquality
head(AQ_original,5)
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
dim(AQ)
library(leaps)
allsub1 <- regsubsets(x=AQ[,2:6],
y=AQ[,1], nbest=1)
allsub1
summ.1 <- summary(allsub1)
summ.1
summ.1
names(summ.1)
summ.1$bic
bic_table <- as.table(summ.1$bic)
bic_table
colnames(smoke) <- c("Solar.R","Wind","Temp",'TWcp','TWrat')
colnames(bic_table) <- c("Solar.R","Wind","Temp",'TWcp','TWrat')
bic_table
bic_table <- as.table(summ.1$bic)
colnames(bic_table) <- c("Solar.R","Wind","Temp",'TWcp','TWrat')
bic_table <- data,frame(summ.1$bic)
bic_table <- data.frame(summ.1$bic)
colnames(bic_table) <- c("Solar.R","Wind","Temp",'TWcp','TWrat')
colnames(bic_table) <- colnames("Solar.R","Wind","Temp",'TWcp','TWrat')
colnames(bic_table) <- colnames(("Solar.R","Wind","Temp",'TWcp','TWrat'))
bic_table
bic_table <- data.frame(summ.1$bic)
bic_table
data.frame(summ.1)
summary(allsub1)
bic_table
# Plot of results in a special form
x11(h=7, w=10, pointsize=12)
par(mfrow=c(1,2))
plot(allsub1, main="All Subsets on half of Prostate data")
#  Note: default is to limit to 8-variable models.
#  Add nvmax argument to increase when needed.
allsub1 <- regsubsets(x=prostate[prostate$set==1,1:8],
y=prostate[prostate$set==1,9], nbest=1)
allsub2 <- regsubsets(x=prostate[prostate$set==2,1:8],
y=prostate[prostate$set==2,9], nbest=1)
# Store summary() so we can see BICs
summ.1 <- summary(allsub1)
summ.2 <- summary(allsub2)
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
head(prostate)
set.seed(120401002)
prostate$set <- ifelse(runif(n=nrow(prostate))>0.5, yes=2, no=1)
library(leaps)
#  Note: default is to limit to 8-variable models.
#  Add nvmax argument to increase when needed.
allsub1 <- regsubsets(x=prostate[prostate$set==1,1:8],
y=prostate[prostate$set==1,9], nbest=1)
allsub2 <- regsubsets(x=prostate[prostate$set==2,1:8],
y=prostate[prostate$set==2,9], nbest=1)
# Store summary() so we can see BICs
summ.1 <- summary(allsub1)
summ.2 <- summary(allsub2)
summ.1
summ.2
names(summ.1)
summ.1$bic
summ.2$bic
x11(h=7, w=10, pointsize=12)
par(mfrow=c(1,2))
plot(allsub1, main="All Subsets on half of Prostate data")
x11(h=7, w=10, pointsize=12)
par(mfrow=c(1,2))
plot(allsub1, main="All Subsets on half of Prostate data")
plot(allsub2, main="All Subsets on other half of Prostate data")
################# hw5 ###############
rm(list=ls(all=TRUE))
AQ_original = airquality
head(AQ_original,5)
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
dim(AQ)
#### 1.###########
library(leaps)
allsub1 <- regsubsets(x=AQ[,2:6],
y=AQ[,1], nbest=1)
allsub1
summ.1 <- summary(allsub1)
summ.1
names(summ.1)
summ.1$bic
bic_table <- data.frame(summ.1$bic)
bic_table
summary(allsub1)
x11(h=7, w=10, pointsize=12)
x11(h=7, w=10, pointsize=12)
plot(allsub1, main="All AQ data")
allsub1
x11(h=7, w=10, pointsize=12)
plot(allsub1, main="All AQ data")
x11(h=7, w=10, pointsize=12)
plot(allsub1, main="All AQ data")
################# hw5 ###############
rm(list=ls(all=TRUE))
AQ_original = airquality
head(AQ_original,5)
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
dim(AQ)
#### 1.###########
library(leaps)
allsub1 <- regsubsets(x=AQ[,2:6],
y=AQ[,1], nbest=1)
allsub1
summ.1 <- summary(allsub1)
summ.1
names(summ.1)
summ.1$bic
bic_table <- data.frame(summ.1$bic)
bic_table
summary(allsub1)
x11(h=7, w=10, pointsize=12)
plot(allsub1, main="All AQ data")
plot(summ.1, main="All AQ data")
x11(h=7, w=10, pointsize=12)
plot(summ.1, main="All AQ data")
x11(h=7, w=10, pointsize=12)
par(mfrow=c(1,2))
plot(allsub1, main="All AQ data")
x11(h=15, w=10, pointsize=12)
par(mfrow=c(1,1))
plot(allsub1, main="All AQ data")
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
head(prostate)
set.seed(120401002)
prostate$set <- ifelse(runif(n=nrow(prostate))>0.5, yes=2, no=1)
library(leaps)
#  Note: default is to limit to 8-variable models.
#  Add nvmax argument to increase when needed.
allsub1 <- regsubsets(x=prostate[prostate$set==1,1:8],
y=prostate[prostate$set==1,9], nbest=1)
allsub2 <- regsubsets(x=prostate[prostate$set==2,1:8],
y=prostate[prostate$set==2,9], nbest=1)
# Store summary() so we can see BICs
summ.1 <- summary(allsub1)
summ.2 <- summary(allsub2)
summ.1
summ.2
names(summ.1)
summ.1$bic
summ.2$bic
# Plot of results in a special form
x11(h=7, w=10, pointsize=12)
par(mfrow=c(1,2))
plot(allsub1, main="All Subsets on half of Prostate data")
plot(allsub2, main="All Subsets on other half of Prostate data")
################# hw5 ###############
rm(list=ls(all=TRUE))
AQ_original = airquality
head(AQ_original,5)
AQ = na.omit(airquality[,1:4])
AQ$TWcp = AQ$Temp*AQ$Wind # cross-product
AQ$TWrat = AQ$Temp/AQ$Wind # ratio
head(AQ)
dim(AQ)
#### 1.###########
library(leaps)
allsub1 <- regsubsets(x=AQ[,2:6],
y=AQ[,1], nbest=1)
allsub1
summ.1 <- summary(allsub1)
summ.1
names(summ.1)
summ.1$bic
bic_table <- data.frame(summ.1$bic)
bic_table
x11(h=15, w=10, pointsize=12)
x11(h=15, w=10, pointsize=12)
par(mfrow=c(1,1))
plot(allsub1, main="All AQ data")
##########2.########
## stepwise
initial.1 <- lm(data=AQ,
formula=Ozone~ 1)
final.1 <- lm(data=AQ,
formula=Ozone~.)
step1 <- step(object=initial.1, scope=list(upper=final.1),
k = log(n1))
##########2.########
## stepwise
n1 = nrow(AQ)
initial.1 <- lm(data=AQ,
formula=Ozone~ 1)
final.1 <- lm(data=AQ,
formula=Ozone~.)
step1 <- step(object=initial.1, scope=list(upper=final.1),
k = log(n1))
summary(step1)
##########2.########
## stepwise
n1 = nrow(AQ)
initial.1 <- lm(data=AQ,
formula=Ozone~ 1)
final.1 <- lm(data=AQ,
formula=Ozone~Solar.R,+Wind+Temp,TWcp,TWrat)
step1 <- step(object=initial.1, scope=list(upper=final.1),
k = log(n1))
head(AQ)
final.1 <- lm(data=AQ,
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step1 <- step(object=initial.1, scope=list(upper=final.1),
k = log(n1))
##########2.########
## stepwise
n1 = nrow(AQ)
initial.1 <- lm(data=AQ,
formula=Ozone~ 1)
final.1 <- lm(data=AQ,
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step1 <- step(object=initial.1, scope=list(upper=final.1),
k = log(n1))
summary(step1)
step1 <- step(object=initial.1, scope=list(upper=final.1),
k = log(n1))
summary(step1)
step1
MSPEs.cv
########3.############
# Let's do 10-fold CV
set.seed(2928893)
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
########3.############
# Let's do 10-fold CV
set.seed(2928893)
n = nrow(AQ)
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=1)
for(v in 1:V){
# fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
# fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
# fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
# fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
# fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
#              +Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
#
# pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
# pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
# pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
# pred.all = predict(fit.all, newdata=AQ[folds==v,])
# pred.int = predict(fit.int,newdata=AQ[folds==v,])
#
# MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
# MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
# MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
# MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
# MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
#
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred)^2)
}
MSPEs.cv
########3.############
# Let's do 10-fold CV
set.seed(2928893)
n = nrow(AQ)
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=2)
for(v in 1:V){
# fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
# fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
# fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
# fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
# fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
#              +Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
#
# pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
# pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
# pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
# pred.all = predict(fit.all, newdata=AQ[folds==v,])
# pred.int = predict(fit.int,newdata=AQ[folds==v,])
#
# MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
# MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
# MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
# MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
# MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
#
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred)^2)
MSPEs.cv[v,2] = step
}
MSPEs.cv
########3.############
# Let's do 10-fold CV
set.seed(2928893)
n = nrow(AQ)
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=2)
for(v in 1:V){
# fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
# fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
# fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
# fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
# fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
#              +Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
#
# pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
# pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
# pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
# pred.all = predict(fit.all, newdata=AQ[folds==v,])
# pred.int = predict(fit.int,newdata=AQ[folds==v,])
#
# MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
# MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
# MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
# MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
# MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
#
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred)^2)
MSPEs.cv[v,2] = names(step)
}
MSPEs.cv
# colnames(MSPEs.cv) = c("Solar.R", "Wind", "Temp","TWcp","TWrat")
MSPEs.cv
########3.############
# Let's do 10-fold CV
set.seed(2928893)
n = nrow(AQ)
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=2)
# colnames(MSPEs.cv) = c("Solar.R", "Wind", "Temp","TWcp","TWrat")
MSPEs.cv
for(v in 1:V){
# fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
# fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
# fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
# fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
# fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
#              +Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
#
# pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
# pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
# pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
# pred.all = predict(fit.all, newdata=AQ[folds==v,])
# pred.int = predict(fit.int,newdata=AQ[folds==v,])
#
# MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
# MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
# MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
# MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
# MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
#
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred)^2)
MSPEs.cv[v,2] = names(step)
}
########3.############
# Let's do 10-fold CV
set.seed(2928893)
n = nrow(AQ)
V=10
# Abbreviating sample.int function arguments
folds = floor((sample.int(n)-1)*V/n) + 1
MSPEs.cv = matrix(NA, nrow=V, ncol=1)
# colnames(MSPEs.cv) = c("Solar.R", "Wind", "Temp","TWcp","TWrat")
MSPEs.cv
for(v in 1:V){
# fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[folds != v,])
# fit.Wind = lm(Ozone ~ Wind, data = AQ[folds != v,])
# fit.Temp = lm(Ozone ~Temp, data = AQ[folds != v,])
# fit.all = lm(Ozone ~ ., data = AQ[folds != v,])
# fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
#              +Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[folds != v,])
#
# pred.Solar.R = predict(fit.Solar.R, newdata=AQ[folds==v,])
# pred.Wind = predict(fit.Wind, newdata=AQ[folds==v,])
# pred.Temp = predict(fit.Temp, newdata=AQ[folds==v,])
# pred.all = predict(fit.all, newdata=AQ[folds==v,])
# pred.int = predict(fit.int,newdata=AQ[folds==v,])
#
# MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred.Solar.R)^2)
# MSPEs.cv[v,2] = mean((AQ[folds==v,"Ozone"] - pred.Wind)^2)
# MSPEs.cv[v,3] = mean((AQ[folds==v,"Ozone"] - pred.Temp)^2)
# MSPEs.cv[v,4] = mean((AQ[folds==v,"Ozone"] - pred.all)^2)
# MSPEs.cv[v,5] = mean((AQ[folds==v,"Ozone"] - pred.int)^2)
#
initial <- lm(data=AQ[folds != v,],
formula=Ozone~ 1)
final <- lm(data=AQ[folds != v,],
formula=Ozone~Solar.R+Wind+Temp+TWcp+TWrat)
step <- step(object=initial, scope=list(upper=final),
k = log(n1))
pred = predict(step,newdata=AQ[folds==v,])
MSPEs.cv[v,1] = mean((AQ[folds==v,"Ozone"] - pred)^2)
}
MSPEs.cv
mean(MSPEs.cv)
colnames(MSPEs.cv) = c('MSPE each fold')
MSPEs.cv
mean(MSPEs.cv)
### HW 4 ###############
## Concept ###
#X = numerical
#Z = categorical
Z = rep(x=c("A", "B"), each=10)
X = round(rnorm(20),2)
mean.y = rep(c(3,1), each=10)
epsilon = rnorm(20)
Y = round(mean.y + epsilon, 2)
dat = data.frame(Y,Z,X)
dat
cbind(dat[1:10,],dat[11:20,])
class(dat$Z)
levels(dat$Z)
mod.cat = lm(Y ~ Z, data=dat)
summary(mod.cat)
length(mod.cat$coefficients)
mod.cat2 = lm(Y ~ Z + X, data=dat)
summary(mod.cat2)
summary(mod.cat)
length(mod.cat$coefficients)
mod.cat2 = lm(Y ~ Z + X, data=dat)
summary(mod.cat2)
length(mod.cat2$coefficients)
library(caret)
# turn categorical to one-hot encoding
dv1 = dummyVars("~.", data=dat)
dv2 = predict(dv1, newdata=dat)
dat.dv = data.frame(dv2)
mod.cat.dv = lm(Y ~ ., data=dat.dv)
summary(mod.cat.dv)
mod.cp = lm(Y ~ Z + X + Z:X, data=dat.dv)
summary(mod.cp)
dim(AQ) # 111 x 4
head(AQ)
n = nrow(AQ) #store sample size for easy calculations later
sf1 = 0.75
set.seed(4099183)
reorder = sample.int(n=n, size=n, replace=FALSE) ### Shuffled numbers from 1 to n
reorder
set = ifelse(test=(reorder < sf1*n), yes=1,
no=2)
set
AQ[set==2,]
dim(AQ[set==1,])
dim(AQ[set==2,])
#
# fit.Solar.R = lm(Ozone ~ Solar.R, data = AQ[set==1,])
# fit.Wind = lm(Ozone ~ Wind, data = AQ[set==1,])
# fit.Temp = lm(Ozone ~Temp, data = AQ[set==1,])
# fit.all = lm(Ozone ~ ., data = AQ[set==1,])
# fit.int = lm(formula= Ozone~Temp+Wind+Solar.R+I(Temp^2)+I(Wind^2)+I(Solar.R^2)
#              +Temp*Wind+Temp*Solar.R+Wind*Solar.R, data = AQ[set==1,])
fit.lm_TWcp = lm(Ozone ~ Temp + Wind + TWcp, data = AQ[set==1,])
fit.lm_TWrat = lm(Ozone ~ Temp + Wind + TWrat, data = AQ[set==1,])
#
# pred.Solar.R = predict(fit.Solar.R, newdata=AQ[set==2,])
# pred.Wind = predict(fit.Wind, newdata=AQ[set==2,])
# pred.Temp = predict(fit.Temp, newdata=AQ[set==2,])
# pred.all = predict(fit.all, newdata=AQ[set==2,])
# pred.int = predict(fit.int,newdata=AQ[set==2,])
pred.lm_TWcp = predict(fit.lm_TWcp, newdata=AQ[set==2,])
pred.lm_TWrat = predict(fit.lm_TWrat,newdata=AQ[set==2,])
# (MSPE.Solar.R = mean((AQ[set==2,"Ozone"] - pred.Solar.R)^2))
# (MSPE.Wind = mean((AQ[set==2,"Ozone"] - pred.Wind)^2))
# (MSPE.Temp = mean((AQ[set==2,"Ozone"] - pred.Temp)^2))
# (MSPE.all = mean((AQ[set==2,"Ozone"] - pred.all)^2))
# (MSPE.int = mean((AQ[set==2,"Ozone"] - pred.int)^2))
(MSPE.lm_TWcp = mean((AQ[set==2,"Ozone"] - pred.lm_TWcp)^2))
(MSPE.lm_TWrat = mean((AQ[set==2,"Ozone"] - pred.lm_TWrat)^2))
